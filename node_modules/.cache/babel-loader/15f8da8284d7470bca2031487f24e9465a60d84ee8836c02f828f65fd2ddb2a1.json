{"ast":null,"code":"var _jsxFileName = \"/home/noize/hacking/projects/cherrynoize.github.io/src/components/Blog.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet blogEntries = {};\nblogEntries['main'] = toMap(require.context('./blog/main/entries/', false, /\\.(jsx?)$/));\n\n/* Returns map from context */\nexport function toMap(ctx) {\n  return ctx.keys().map(ctx);\n}\n\n/* Returns blog entry */\nexport function Entry(props) {\n  _s();\n  const [isVisible, setVisible] = React.useState(true);\n  const domRef = React.useRef();\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => setVisible(entry.isIntersecting));\n    });\n    const curDom = domRef.current;\n    observer.observe(curDom);\n    return () => observer.unobserve(curDom);\n  }, []);\n  const src = './blog/main/entries/First.jsx'(async () => {\n    const {\n      default: Post\n    } = await import(\"/modules/my-module.js\");\n    console.log('src:', src, 'post:', Post);\n  })();\n  console.log('src:', src, 'post:', Post);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: props.key,\n    className: 'entry fade-in ' + (isVisible ? 'is-visible' : ''),\n    ref: domRef,\n    children: /*#__PURE__*/_jsxDEV(Post, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n/* Returns collection of posts */\n_s(Entry, \"W/9iH9oQBf3mNfp3GiCIMvvkDE8=\");\n_c = Entry;\nexport default function Blog(props) {\n  const entries = blogEntries[props.dir];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"blog\",\n    children: entries.map((entry, index) => /*#__PURE__*/_jsxDEV(Entry, {\n      src: entry\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Blog;\nvar _c, _c2;\n$RefreshReg$(_c, \"Entry\");\n$RefreshReg$(_c2, \"Blog\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","blogEntries","toMap","require","context","ctx","keys","map","Entry","props","_s","isVisible","setVisible","useState","domRef","useRef","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","curDom","current","observe","unobserve","src","default","Post","console","log","id","key","className","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Blog","dir","index","_c2","$RefreshReg$"],"sources":["/home/noize/hacking/projects/cherrynoize.github.io/src/components/Blog.jsx"],"sourcesContent":["import React from 'react';\n\nlet blogEntries = {}\nblogEntries['main'] = toMap(require.context('./blog/main/entries/', false, /\\.(jsx?)$/));\n\n/* Returns map from context */\nexport function toMap(ctx) {\n  return ctx.keys().map(ctx);\n}\n\n/* Returns blog entry */\nexport function Entry(props) {\n  const [isVisible, setVisible] = React.useState(true);\n  const domRef = React.useRef();\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => setVisible(entry.isIntersecting));\n    });\n\n    const curDom = domRef.current;\n    observer.observe(curDom);\n    return () => observer.unobserve(curDom);\n  }, []);\n\n  const src = './blog/main/entries/First.jsx'\n\n  (async () => {\n    const {\n      default: Post,\n    } = await import(\"/modules/my-module.js\");\n    console.log('src:', src, 'post:', Post);\n  })();\n\n  console.log('src:', src, 'post:', Post);\n\n  return (\n    <div\n      id={props.key}\n      className={'entry fade-in ' + (isVisible ? 'is-visible' : '')}\n      ref={domRef}\n    >\n      <Post />\n    </div>\n  );\n}\n\n/* Returns collection of posts */\nexport default function Blog(props) {\n  const entries = blogEntries[props.dir];\n\n  return(\n    <div id=\"blog\">\n      {\n        entries.map((entry, index) => (\n          <Entry key={index} src={entry} />\n        ))\n      }\n    </div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,IAAIC,WAAW,GAAG,CAAC,CAAC;AACpBA,WAAW,CAAC,MAAM,CAAC,GAAGC,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,sBAAsB,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;;AAExF;AACA,OAAO,SAASF,KAAKA,CAACG,GAAG,EAAE;EACzB,OAAOA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAACF,GAAG,CAAC;AAC5B;;AAEA;AACA,OAAO,SAASG,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMC,MAAM,GAAGhB,KAAK,CAACiB,MAAM,CAAC,CAAC;EAE7BjB,KAAK,CAACkB,SAAS,CAAC,MAAM;IACpB,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAACC,OAAO,IAAI;MACnDA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAIT,UAAU,CAACS,KAAK,CAACC,cAAc,CAAC,CAAC;IAC5D,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAGT,MAAM,CAACU,OAAO;IAC7BP,QAAQ,CAACQ,OAAO,CAACF,MAAM,CAAC;IACxB,OAAO,MAAMN,QAAQ,CAACS,SAAS,CAACH,MAAM,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,GAAG,GAAG,+BAA+B,CAE1C,YAAY;IACX,MAAM;MACJC,OAAO,EAAEC;IACX,CAAC,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC;IACzCC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEJ,GAAG,EAAE,OAAO,EAAEE,IAAI,CAAC;EACzC,CAAC,CAAC,CAAC,CAAC;EAEJC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEJ,GAAG,EAAE,OAAO,EAAEE,IAAI,CAAC;EAEvC,oBACE7B,OAAA;IACEgC,EAAE,EAAEvB,KAAK,CAACwB,GAAI;IACdC,SAAS,EAAE,gBAAgB,IAAIvB,SAAS,GAAG,YAAY,GAAG,EAAE,CAAE;IAC9DwB,GAAG,EAAErB,MAAO;IAAAsB,QAAA,eAEZpC,OAAA,CAAC6B,IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;;AAEA;AAAA9B,EAAA,CApCgBF,KAAK;AAAAiC,EAAA,GAALjC,KAAK;AAqCrB,eAAe,SAASkC,IAAIA,CAACjC,KAAK,EAAE;EAClC,MAAMU,OAAO,GAAGlB,WAAW,CAACQ,KAAK,CAACkC,GAAG,CAAC;EAEtC,oBACE3C,OAAA;IAAKgC,EAAE,EAAC,MAAM;IAAAI,QAAA,EAEVjB,OAAO,CAACZ,GAAG,CAAC,CAACc,KAAK,EAAEuB,KAAK,kBACvB5C,OAAA,CAACQ,KAAK;MAAamB,GAAG,EAAEN;IAAM,GAAlBuB,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACjC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAEV;AAACK,GAAA,GAZuBH,IAAI;AAAA,IAAAD,EAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}